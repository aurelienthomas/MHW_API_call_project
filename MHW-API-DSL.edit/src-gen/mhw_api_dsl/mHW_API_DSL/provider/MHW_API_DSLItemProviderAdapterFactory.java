/**
 */
package mhw_api_dsl.mHW_API_DSL.provider;

import java.util.ArrayList;
import java.util.Collection;

import mhw_api_dsl.mHW_API_DSL.util.MHW_API_DSLAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MHW_API_DSLItemProviderAdapterFactory extends MHW_API_DSLAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MHW_API_DSLItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link mhw_api_dsl.mHW_API_DSL.Armor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArmorItemProvider armorItemProvider;

	/**
	 * This creates an adapter for a {@link mhw_api_dsl.mHW_API_DSL.Armor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArmorAdapter() {
		if (armorItemProvider == null) {
			armorItemProvider = new ArmorItemProvider(this);
		}

		return armorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mhw_api_dsl.mHW_API_DSL.ArmorSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArmorSetItemProvider armorSetItemProvider;

	/**
	 * This creates an adapter for a {@link mhw_api_dsl.mHW_API_DSL.ArmorSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArmorSetAdapter() {
		if (armorSetItemProvider == null) {
			armorSetItemProvider = new ArmorSetItemProvider(this);
		}

		return armorSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mhw_api_dsl.mHW_API_DSL.Slot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SlotItemProvider slotItemProvider;

	/**
	 * This creates an adapter for a {@link mhw_api_dsl.mHW_API_DSL.Slot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSlotAdapter() {
		if (slotItemProvider == null) {
			slotItemProvider = new SlotItemProvider(this);
		}

		return slotItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mhw_api_dsl.mHW_API_DSL.Resistance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResistanceItemProvider resistanceItemProvider;

	/**
	 * This creates an adapter for a {@link mhw_api_dsl.mHW_API_DSL.Resistance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResistanceAdapter() {
		if (resistanceItemProvider == null) {
			resistanceItemProvider = new ResistanceItemProvider(this);
		}

		return resistanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mhw_api_dsl.mHW_API_DSL.Skill} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SkillItemProvider skillItemProvider;

	/**
	 * This creates an adapter for a {@link mhw_api_dsl.mHW_API_DSL.Skill}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSkillAdapter() {
		if (skillItemProvider == null) {
			skillItemProvider = new SkillItemProvider(this);
		}

		return skillItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mhw_api_dsl.mHW_API_DSL.Item} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ItemItemProvider itemItemProvider;

	/**
	 * This creates an adapter for a {@link mhw_api_dsl.mHW_API_DSL.Item}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createItemAdapter() {
		if (itemItemProvider == null) {
			itemItemProvider = new ItemItemProvider(this);
		}

		return itemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mhw_api_dsl.mHW_API_DSL.Material} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaterialItemProvider materialItemProvider;

	/**
	 * This creates an adapter for a {@link mhw_api_dsl.mHW_API_DSL.Material}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaterialAdapter() {
		if (materialItemProvider == null) {
			materialItemProvider = new MaterialItemProvider(this);
		}

		return materialItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mhw_api_dsl.mHW_API_DSL.Defence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DefenceItemProvider defenceItemProvider;

	/**
	 * This creates an adapter for a {@link mhw_api_dsl.mHW_API_DSL.Defence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDefenceAdapter() {
		if (defenceItemProvider == null) {
			defenceItemProvider = new DefenceItemProvider(this);
		}

		return defenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mhw_api_dsl.mHW_API_DSL.Charm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CharmItemProvider charmItemProvider;

	/**
	 * This creates an adapter for a {@link mhw_api_dsl.mHW_API_DSL.Charm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCharmAdapter() {
		if (charmItemProvider == null) {
			charmItemProvider = new CharmItemProvider(this);
		}

		return charmItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mhw_api_dsl.mHW_API_DSL.Decoration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecorationItemProvider decorationItemProvider;

	/**
	 * This creates an adapter for a {@link mhw_api_dsl.mHW_API_DSL.Decoration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecorationAdapter() {
		if (decorationItemProvider == null) {
			decorationItemProvider = new DecorationItemProvider(this);
		}

		return decorationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mhw_api_dsl.mHW_API_DSL.Weapon} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WeaponItemProvider weaponItemProvider;

	/**
	 * This creates an adapter for a {@link mhw_api_dsl.mHW_API_DSL.Weapon}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWeaponAdapter() {
		if (weaponItemProvider == null) {
			weaponItemProvider = new WeaponItemProvider(this);
		}

		return weaponItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mhw_api_dsl.mHW_API_DSL.Element} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementItemProvider elementItemProvider;

	/**
	 * This creates an adapter for a {@link mhw_api_dsl.mHW_API_DSL.Element}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementAdapter() {
		if (elementItemProvider == null) {
			elementItemProvider = new ElementItemProvider(this);
		}

		return elementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mhw_api_dsl.mHW_API_DSL.Request} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequestItemProvider requestItemProvider;

	/**
	 * This creates an adapter for a {@link mhw_api_dsl.mHW_API_DSL.Request}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequestAdapter() {
		if (requestItemProvider == null) {
			requestItemProvider = new RequestItemProvider(this);
		}

		return requestItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (armorItemProvider != null)
			armorItemProvider.dispose();
		if (armorSetItemProvider != null)
			armorSetItemProvider.dispose();
		if (slotItemProvider != null)
			slotItemProvider.dispose();
		if (resistanceItemProvider != null)
			resistanceItemProvider.dispose();
		if (skillItemProvider != null)
			skillItemProvider.dispose();
		if (itemItemProvider != null)
			itemItemProvider.dispose();
		if (materialItemProvider != null)
			materialItemProvider.dispose();
		if (defenceItemProvider != null)
			defenceItemProvider.dispose();
		if (charmItemProvider != null)
			charmItemProvider.dispose();
		if (decorationItemProvider != null)
			decorationItemProvider.dispose();
		if (weaponItemProvider != null)
			weaponItemProvider.dispose();
		if (elementItemProvider != null)
			elementItemProvider.dispose();
		if (requestItemProvider != null)
			requestItemProvider.dispose();
	}

}
