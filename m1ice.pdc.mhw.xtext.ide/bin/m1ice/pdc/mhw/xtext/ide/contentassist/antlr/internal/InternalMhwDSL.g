/*
 * generated by Xtext 2.16.0
 */
grammar InternalMhwDSL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package m1ice.pdc.mhw.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package m1ice.pdc.mhw.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import m1ice.pdc.mhw.xtext.services.MhwDSLGrammarAccess;

}
@parser::members {
	private MhwDSLGrammarAccess grammarAccess;

	public void setGrammarAccess(MhwDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleRequest
entryRuleRequest
:
{ before(grammarAccess.getRequestRule()); }
	 ruleRequest
{ after(grammarAccess.getRequestRule()); } 
	 EOF 
;

// Rule Request
ruleRequest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRequestAccess().getGroup()); }
		(rule__Request__Group__0)
		{ after(grammarAccess.getRequestAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDecoration
entryRuleDecoration
:
{ before(grammarAccess.getDecorationRule()); }
	 ruleDecoration
{ after(grammarAccess.getDecorationRule()); } 
	 EOF 
;

// Rule Decoration
ruleDecoration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDecorationAccess().getGroup()); }
		(rule__Decoration__Group__0)
		{ after(grammarAccess.getDecorationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCharm
entryRuleCharm
:
{ before(grammarAccess.getCharmRule()); }
	 ruleCharm
{ after(grammarAccess.getCharmRule()); } 
	 EOF 
;

// Rule Charm
ruleCharm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCharmAccess().getGroup()); }
		(rule__Charm__Group__0)
		{ after(grammarAccess.getCharmAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArmor
entryRuleArmor
:
{ before(grammarAccess.getArmorRule()); }
	 ruleArmor
{ after(grammarAccess.getArmorRule()); } 
	 EOF 
;

// Rule Armor
ruleArmor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArmorAccess().getGroup()); }
		(rule__Armor__Group__0)
		{ after(grammarAccess.getArmorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWeapon
entryRuleWeapon
:
{ before(grammarAccess.getWeaponRule()); }
	 ruleWeapon
{ after(grammarAccess.getWeaponRule()); } 
	 EOF 
;

// Rule Weapon
ruleWeapon 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWeaponAccess().getGroup()); }
		(rule__Weapon__Group__0)
		{ after(grammarAccess.getWeaponAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Request__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Request__Group__0__Impl
	rule__Request__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Request__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequestAccess().getRequestAction_0()); }
	()
	{ after(grammarAccess.getRequestAccess().getRequestAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Request__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Request__Group__1__Impl
	rule__Request__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Request__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequestAccess().getRequestKeyword_1()); }
	'Request'
	{ after(grammarAccess.getRequestAccess().getRequestKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Request__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Request__Group__2__Impl
	rule__Request__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Request__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequestAccess().getNameAssignment_2()); }
	(rule__Request__NameAssignment_2)
	{ after(grammarAccess.getRequestAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Request__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Request__Group__3__Impl
	rule__Request__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Request__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequestAccess().getArmorAssignment_3()); }
	(rule__Request__ArmorAssignment_3)?
	{ after(grammarAccess.getRequestAccess().getArmorAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Request__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Request__Group__4__Impl
	rule__Request__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Request__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequestAccess().getWeaponAssignment_4()); }
	(rule__Request__WeaponAssignment_4)?
	{ after(grammarAccess.getRequestAccess().getWeaponAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Request__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Request__Group__5__Impl
	rule__Request__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Request__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequestAccess().getCharmAssignment_5()); }
	(rule__Request__CharmAssignment_5)?
	{ after(grammarAccess.getRequestAccess().getCharmAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Request__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Request__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Request__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequestAccess().getDecorationAssignment_6()); }
	(rule__Request__DecorationAssignment_6)?
	{ after(grammarAccess.getRequestAccess().getDecorationAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Decoration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decoration__Group__0__Impl
	rule__Decoration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Decoration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecorationAccess().getDecorationAction_0()); }
	()
	{ after(grammarAccess.getDecorationAccess().getDecorationAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decoration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decoration__Group__1__Impl
	rule__Decoration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Decoration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecorationAccess().getDecorationKeyword_1()); }
	'Decoration'
	{ after(grammarAccess.getDecorationAccess().getDecorationKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decoration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decoration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Decoration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecorationAccess().getNameAssignment_2()); }
	(rule__Decoration__NameAssignment_2)
	{ after(grammarAccess.getDecorationAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Charm__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Charm__Group__0__Impl
	rule__Charm__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Charm__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCharmAccess().getCharmAction_0()); }
	()
	{ after(grammarAccess.getCharmAccess().getCharmAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Charm__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Charm__Group__1__Impl
	rule__Charm__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Charm__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCharmAccess().getCharmKeyword_1()); }
	'Charm'
	{ after(grammarAccess.getCharmAccess().getCharmKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Charm__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Charm__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Charm__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCharmAccess().getNameAssignment_2()); }
	(rule__Charm__NameAssignment_2)
	{ after(grammarAccess.getCharmAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Armor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Armor__Group__0__Impl
	rule__Armor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Armor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArmorAccess().getArmorAction_0()); }
	()
	{ after(grammarAccess.getArmorAccess().getArmorAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Armor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Armor__Group__1__Impl
	rule__Armor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Armor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArmorAccess().getArmorKeyword_1()); }
	'Armor'
	{ after(grammarAccess.getArmorAccess().getArmorKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Armor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Armor__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Armor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArmorAccess().getNameAssignment_2()); }
	(rule__Armor__NameAssignment_2)
	{ after(grammarAccess.getArmorAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Weapon__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Weapon__Group__0__Impl
	rule__Weapon__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Weapon__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWeaponAccess().getWeaponAction_0()); }
	()
	{ after(grammarAccess.getWeaponAccess().getWeaponAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Weapon__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Weapon__Group__1__Impl
	rule__Weapon__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Weapon__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWeaponAccess().getWeaponKeyword_1()); }
	'Weapon'
	{ after(grammarAccess.getWeaponAccess().getWeaponKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Weapon__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Weapon__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Weapon__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWeaponAccess().getNameAssignment_2()); }
	(rule__Weapon__NameAssignment_2)
	{ after(grammarAccess.getWeaponAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Request__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRequestAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getRequestAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Request__ArmorAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRequestAccess().getArmorArmorParserRuleCall_3_0()); }
		ruleArmor
		{ after(grammarAccess.getRequestAccess().getArmorArmorParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Request__WeaponAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRequestAccess().getWeaponWeaponParserRuleCall_4_0()); }
		ruleWeapon
		{ after(grammarAccess.getRequestAccess().getWeaponWeaponParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Request__CharmAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRequestAccess().getCharmCharmParserRuleCall_5_0()); }
		ruleCharm
		{ after(grammarAccess.getRequestAccess().getCharmCharmParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Request__DecorationAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRequestAccess().getDecorationDecorationParserRuleCall_6_0()); }
		ruleDecoration
		{ after(grammarAccess.getRequestAccess().getDecorationDecorationParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decoration__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecorationAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getDecorationAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Charm__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCharmAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getCharmAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Armor__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArmorAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getArmorAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Weapon__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWeaponAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getWeaponAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
