/*
 * generated by Xtext 2.16.0
 */
package m1ice.pdc.mhw.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MhwDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RequestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m1ice.pdc.mhw.xtext.MhwDSL.Request");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRequestAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRequestKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cArmorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArmorArmorParserRuleCall_3_0 = (RuleCall)cArmorAssignment_3.eContents().get(0);
		private final Assignment cWeaponAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWeaponWeaponParserRuleCall_4_0 = (RuleCall)cWeaponAssignment_4.eContents().get(0);
		private final Assignment cCharmAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCharmCharmParserRuleCall_5_0 = (RuleCall)cCharmAssignment_5.eContents().get(0);
		private final Assignment cDecorationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDecorationDecorationParserRuleCall_6_0 = (RuleCall)cDecorationAssignment_6.eContents().get(0);
		
		//Request:
		//	{Request}
		//	'Request'
		//	name=EString
		//	//	'{'
		//	//		('decoration' '{' decoration+=Decoration ( "," decoration+=Decoration)* '}' )?
		//	//		('charm' '{' charm+=Charm ( "," charm+=Charm)* '}' )?
		//	//		('armor' '{' armor+=Armor ( "," armor+=Armor)* '}' )?
		//	//		('weapon' '{' weapon+=Weapon ( "," weapon+=Weapon)* '}' )?
		//	//	'}';
		//
		//	armor+=Armor? weapon+=Weapon? charm+=Charm? decoration+=Decoration?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Request} 'Request' name=EString //	'{'
		////		('decoration' '{' decoration+=Decoration ( "," decoration+=Decoration)* '}' )?
		////		('charm' '{' charm+=Charm ( "," charm+=Charm)* '}' )?
		////		('armor' '{' armor+=Armor ( "," armor+=Armor)* '}' )?
		////		('weapon' '{' weapon+=Weapon ( "," weapon+=Weapon)* '}' )?
		////	'}';
		//armor+=Armor? weapon+=Weapon? charm+=Charm? decoration+=Decoration?
		public Group getGroup() { return cGroup; }
		
		//{Request}
		public Action getRequestAction_0() { return cRequestAction_0; }
		
		//'Request'
		public Keyword getRequestKeyword_1() { return cRequestKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		////	'{'
		////		('decoration' '{' decoration+=Decoration ( "," decoration+=Decoration)* '}' )?
		////		('charm' '{' charm+=Charm ( "," charm+=Charm)* '}' )?
		////		('armor' '{' armor+=Armor ( "," armor+=Armor)* '}' )?
		////		('weapon' '{' weapon+=Weapon ( "," weapon+=Weapon)* '}' )?
		////	'}';
		//armor+=Armor?
		public Assignment getArmorAssignment_3() { return cArmorAssignment_3; }
		
		//Armor
		public RuleCall getArmorArmorParserRuleCall_3_0() { return cArmorArmorParserRuleCall_3_0; }
		
		//weapon+=Weapon?
		public Assignment getWeaponAssignment_4() { return cWeaponAssignment_4; }
		
		//Weapon
		public RuleCall getWeaponWeaponParserRuleCall_4_0() { return cWeaponWeaponParserRuleCall_4_0; }
		
		//charm+=Charm?
		public Assignment getCharmAssignment_5() { return cCharmAssignment_5; }
		
		//Charm
		public RuleCall getCharmCharmParserRuleCall_5_0() { return cCharmCharmParserRuleCall_5_0; }
		
		//decoration+=Decoration?
		public Assignment getDecorationAssignment_6() { return cDecorationAssignment_6; }
		
		//Decoration
		public RuleCall getDecorationDecorationParserRuleCall_6_0() { return cDecorationDecorationParserRuleCall_6_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m1ice.pdc.mhw.xtext.MhwDSL.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class DecorationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m1ice.pdc.mhw.xtext.MhwDSL.Decoration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDecorationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDecorationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Decoration:
		//	{Decoration}
		//	'Decoration'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Decoration} 'Decoration' name=EString
		public Group getGroup() { return cGroup; }
		
		//{Decoration}
		public Action getDecorationAction_0() { return cDecorationAction_0; }
		
		//'Decoration'
		public Keyword getDecorationKeyword_1() { return cDecorationKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class CharmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m1ice.pdc.mhw.xtext.MhwDSL.Charm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCharmAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCharmKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		////	'{'
		////		('id' id=EInt)?
		////		('rarity' rarity=EString)?
		////		('rank' rank=EInt)?
		////		('skill' skill=Skill)?
		////	'}';
		//Charm:
		//	{Charm}
		//	'Charm'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Charm} 'Charm' name=EString
		public Group getGroup() { return cGroup; }
		
		//{Charm}
		public Action getCharmAction_0() { return cCharmAction_0; }
		
		//'Charm'
		public Keyword getCharmKeyword_1() { return cCharmKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class ArmorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m1ice.pdc.mhw.xtext.MhwDSL.Armor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArmorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cArmorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		////	'{'
		////		('id' id=EInt)?
		////		('rarity' rarity=EInt)?
		////		('level' level=EInt)?
		////		('skill' '{' skill+=Skill ( "," skill+=Skill)* '}' )?
		////	'}';
		//Armor:
		//	{Armor}
		//	'Armor'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Armor} 'Armor' name=EString
		public Group getGroup() { return cGroup; }
		
		//{Armor}
		public Action getArmorAction_0() { return cArmorAction_0; }
		
		//'Armor'
		public Keyword getArmorKeyword_1() { return cArmorKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class WeaponElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m1ice.pdc.mhw.xtext.MhwDSL.Weapon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWeaponAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWeaponKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		////	'{'
		////		('id' id=EInt)?
		////		('slug' slug=EString)?
		////		('rank' rank=EString)?
		////		('rarity' rarity=EInt)?
		////		('imageMale' imageMale=EString)?
		////		('imageFemale' imageFemale=EString)?
		////		('defenseBase' defenseBase=EInt)?
		////		('defenseMax' defenseMax=EInt)?
		////		('fire' fire=EInt)?
		////		('water' water=EInt)?
		////		('ice' ice=EInt)?
		////		('thunder' thunder=EInt)?
		////		('dragon' dragon=EInt)?
		////		('skill' '{' skill+=Skill ( "," skill+=Skill)* '}' )?
		////	'}';
		//Weapon:
		//	{Weapon}
		//	'Weapon'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Weapon} 'Weapon' name=EString
		public Group getGroup() { return cGroup; }
		
		//{Weapon}
		public Action getWeaponAction_0() { return cWeaponAction_0; }
		
		//'Weapon'
		public Keyword getWeaponKeyword_1() { return cWeaponKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m1ice.pdc.mhw.xtext.MhwDSL.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////	'{'
		////		('id' id=EInt)?
		////		('type' type=EString)?
		////		('rarity' rarity=EString)?
		////		('attack' attack=EString)?
		////		('thunder' thunder=EInt)?
		////		('water' water=EInt)?
		////		('dragon' dragon=EInt)?
		////		('ice' ice=EInt)?
		////		('fire' fire=EInt)?
		////	'}';
		//EInt ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class SkillElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "m1ice.pdc.mhw.xtext.MhwDSL.Skill");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSkillAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSkillKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSkillNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSkillNameEStringParserRuleCall_2_0 = (RuleCall)cSkillNameAssignment_2.eContents().get(0);
		
		//Skill:
		//	{Skill}
		//	'Skill'
		//	skillName=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Skill} 'Skill' skillName=EString
		public Group getGroup() { return cGroup; }
		
		//{Skill}
		public Action getSkillAction_0() { return cSkillAction_0; }
		
		//'Skill'
		public Keyword getSkillKeyword_1() { return cSkillKeyword_1; }
		
		//skillName=EString
		public Assignment getSkillNameAssignment_2() { return cSkillNameAssignment_2; }
		
		//EString
		public RuleCall getSkillNameEStringParserRuleCall_2_0() { return cSkillNameEStringParserRuleCall_2_0; }
	}
	
	
	private final RequestElements pRequest;
	private final EStringElements pEString;
	private final DecorationElements pDecoration;
	private final CharmElements pCharm;
	private final ArmorElements pArmor;
	private final WeaponElements pWeapon;
	private final EIntElements pEInt;
	private final SkillElements pSkill;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MhwDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRequest = new RequestElements();
		this.pEString = new EStringElements();
		this.pDecoration = new DecorationElements();
		this.pCharm = new CharmElements();
		this.pArmor = new ArmorElements();
		this.pWeapon = new WeaponElements();
		this.pEInt = new EIntElements();
		this.pSkill = new SkillElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("m1ice.pdc.mhw.xtext.MhwDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Request:
	//	{Request}
	//	'Request'
	//	name=EString
	//	//	'{'
	//	//		('decoration' '{' decoration+=Decoration ( "," decoration+=Decoration)* '}' )?
	//	//		('charm' '{' charm+=Charm ( "," charm+=Charm)* '}' )?
	//	//		('armor' '{' armor+=Armor ( "," armor+=Armor)* '}' )?
	//	//		('weapon' '{' weapon+=Weapon ( "," weapon+=Weapon)* '}' )?
	//	//	'}';
	//
	//	armor+=Armor? weapon+=Weapon? charm+=Charm? decoration+=Decoration?;
	public RequestElements getRequestAccess() {
		return pRequest;
	}
	
	public ParserRule getRequestRule() {
		return getRequestAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Decoration:
	//	{Decoration}
	//	'Decoration'
	//	name=EString;
	public DecorationElements getDecorationAccess() {
		return pDecoration;
	}
	
	public ParserRule getDecorationRule() {
		return getDecorationAccess().getRule();
	}
	
	////	'{'
	////		('id' id=EInt)?
	////		('rarity' rarity=EString)?
	////		('rank' rank=EInt)?
	////		('skill' skill=Skill)?
	////	'}';
	//Charm:
	//	{Charm}
	//	'Charm'
	//	name=EString;
	public CharmElements getCharmAccess() {
		return pCharm;
	}
	
	public ParserRule getCharmRule() {
		return getCharmAccess().getRule();
	}
	
	////	'{'
	////		('id' id=EInt)?
	////		('rarity' rarity=EInt)?
	////		('level' level=EInt)?
	////		('skill' '{' skill+=Skill ( "," skill+=Skill)* '}' )?
	////	'}';
	//Armor:
	//	{Armor}
	//	'Armor'
	//	name=EString;
	public ArmorElements getArmorAccess() {
		return pArmor;
	}
	
	public ParserRule getArmorRule() {
		return getArmorAccess().getRule();
	}
	
	////	'{'
	////		('id' id=EInt)?
	////		('slug' slug=EString)?
	////		('rank' rank=EString)?
	////		('rarity' rarity=EInt)?
	////		('imageMale' imageMale=EString)?
	////		('imageFemale' imageFemale=EString)?
	////		('defenseBase' defenseBase=EInt)?
	////		('defenseMax' defenseMax=EInt)?
	////		('fire' fire=EInt)?
	////		('water' water=EInt)?
	////		('ice' ice=EInt)?
	////		('thunder' thunder=EInt)?
	////		('dragon' dragon=EInt)?
	////		('skill' '{' skill+=Skill ( "," skill+=Skill)* '}' )?
	////	'}';
	//Weapon:
	//	{Weapon}
	//	'Weapon'
	//	name=EString;
	public WeaponElements getWeaponAccess() {
		return pWeapon;
	}
	
	public ParserRule getWeaponRule() {
		return getWeaponAccess().getRule();
	}
	
	////	'{'
	////		('id' id=EInt)?
	////		('type' type=EString)?
	////		('rarity' rarity=EString)?
	////		('attack' attack=EString)?
	////		('thunder' thunder=EInt)?
	////		('water' water=EInt)?
	////		('dragon' dragon=EInt)?
	////		('ice' ice=EInt)?
	////		('fire' fire=EInt)?
	////	'}';
	//EInt ecore::EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//Skill:
	//	{Skill}
	//	'Skill'
	//	skillName=EString;
	public SkillElements getSkillAccess() {
		return pSkill;
	}
	
	public ParserRule getSkillRule() {
		return getSkillAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
