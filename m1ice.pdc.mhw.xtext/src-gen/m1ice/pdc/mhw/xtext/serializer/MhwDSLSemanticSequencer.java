/*
 * generated by Xtext 2.16.0
 */
package m1ice.pdc.mhw.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import m1ice.pdc.mhw.model.mhw.Armor;
import m1ice.pdc.mhw.model.mhw.Charm;
import m1ice.pdc.mhw.model.mhw.Decoration;
import m1ice.pdc.mhw.model.mhw.MhwPackage;
import m1ice.pdc.mhw.model.mhw.Request;
import m1ice.pdc.mhw.model.mhw.Skill;
import m1ice.pdc.mhw.model.mhw.Weapon;
import m1ice.pdc.mhw.xtext.services.MhwDSLGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MhwDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MhwDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MhwPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MhwPackage.ARMOR:
				sequence_Armor(context, (Armor) semanticObject); 
				return; 
			case MhwPackage.CHARM:
				sequence_Charm(context, (Charm) semanticObject); 
				return; 
			case MhwPackage.DECORATION:
				sequence_Decoration(context, (Decoration) semanticObject); 
				return; 
			case MhwPackage.REQUEST:
				sequence_Request(context, (Request) semanticObject); 
				return; 
			case MhwPackage.SKILL:
				sequence_Skill(context, (Skill) semanticObject); 
				return; 
			case MhwPackage.WEAPON:
				sequence_Weapon(context, (Weapon) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Armor returns Armor
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Armor(ISerializationContext context, Armor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MhwPackage.Literals.ARMOR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MhwPackage.Literals.ARMOR__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArmorAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Charm returns Charm
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Charm(ISerializationContext context, Charm semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MhwPackage.Literals.CHARM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MhwPackage.Literals.CHARM__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCharmAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Decoration returns Decoration
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Decoration(ISerializationContext context, Decoration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MhwPackage.Literals.DECORATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MhwPackage.Literals.DECORATION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDecorationAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Request returns Request
	 *
	 * Constraint:
	 *     (name=EString armor+=Armor? weapon+=Weapon? charm+=Charm? decoration+=Decoration?)
	 */
	protected void sequence_Request(ISerializationContext context, Request semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Skill returns Skill
	 *
	 * Constraint:
	 *     skillName=EString
	 */
	protected void sequence_Skill(ISerializationContext context, Skill semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MhwPackage.Literals.SKILL__SKILL_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MhwPackage.Literals.SKILL__SKILL_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSkillAccess().getSkillNameEStringParserRuleCall_2_0(), semanticObject.getSkillName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Weapon returns Weapon
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Weapon(ISerializationContext context, Weapon semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MhwPackage.Literals.WEAPON__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MhwPackage.Literals.WEAPON__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWeaponAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
