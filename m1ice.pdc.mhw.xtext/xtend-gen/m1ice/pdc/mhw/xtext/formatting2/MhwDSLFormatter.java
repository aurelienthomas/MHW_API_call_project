/**
 * generated by Xtext 2.16.0
 */
package m1ice.pdc.mhw.xtext.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import m1ice.pdc.mhw.model.mhw.Armor;
import m1ice.pdc.mhw.model.mhw.Charm;
import m1ice.pdc.mhw.model.mhw.Decoration;
import m1ice.pdc.mhw.model.mhw.Request;
import m1ice.pdc.mhw.model.mhw.Skill;
import m1ice.pdc.mhw.model.mhw.Weapon;
import m1ice.pdc.mhw.xtext.services.MhwDSLGrammarAccess;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class MhwDSLFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MhwDSLGrammarAccess _mhwDSLGrammarAccess;
  
  protected void _format(final Request request, @Extension final IFormattableDocument document) {
    EList<Decoration> _decoration = request.getDecoration();
    for (final Decoration decoration : _decoration) {
      document.<Decoration>format(decoration);
    }
    EList<Charm> _charm = request.getCharm();
    for (final Charm charm : _charm) {
      document.<Charm>format(charm);
    }
    EList<Armor> _armor = request.getArmor();
    for (final Armor armor : _armor) {
      document.<Armor>format(armor);
    }
    EList<Weapon> _weapon = request.getWeapon();
    for (final Weapon weapon : _weapon) {
      document.<Weapon>format(weapon);
    }
  }
  
  protected void _format(final Decoration decoration, @Extension final IFormattableDocument document) {
    document.<Skill>format(decoration.getSkill());
  }
  
  public void format(final Object decoration, final IFormattableDocument document) {
    if (decoration instanceof XtextResource) {
      _format((XtextResource)decoration, document);
      return;
    } else if (decoration instanceof Decoration) {
      _format((Decoration)decoration, document);
      return;
    } else if (decoration instanceof Request) {
      _format((Request)decoration, document);
      return;
    } else if (decoration instanceof EObject) {
      _format((EObject)decoration, document);
      return;
    } else if (decoration == null) {
      _format((Void)null, document);
      return;
    } else if (decoration != null) {
      _format(decoration, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(decoration, document).toString());
    }
  }
}
